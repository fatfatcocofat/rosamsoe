basePath: /api/v1
definitions:
  models.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.UserRegisterRequest:
    properties:
      email:
        maxLength: 225
        type: string
      name:
        maxLength: 225
        minLength: 4
        type: string
      password:
        maxLength: 30
        minLength: 8
        type: string
      password_confirm:
        maxLength: 30
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    - password_confirm
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      email_verified_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.WalletCreateRequest:
    properties:
      currency:
        type: string
    required:
    - currency
    type: object
  models.WalletUpdateRequest:
    properties:
      currency:
        type: string
    type: object
  response.BadGateway:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  response.BadRequest:
    properties:
      errors: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  response.NotFound:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  response.ServerError:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  response.Success:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  response.TokenData:
    properties:
      expires_in:
        type: integer
      token:
        type: string
    type: object
  response.TokenResponse:
    properties:
      data:
        $ref: '#/definitions/response.TokenData'
      success:
        type: boolean
    type: object
  response.Unauthorized:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8000
info:
  contact:
    name: Fathurrohman
    url: https://t.me/fatfatcocofat
  description: Rosamsoe API Documentation
  license:
    name: MIT License
    url: https://github.com/fatfatcocofat/rosamsoe/blob/main/LICENSE
  title: Rosamsoe API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user by providing login credentials in the request
        body and generate an access token.
      parameters:
      - description: User login payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BadRequest'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/response.BadGateway'
      summary: Authenticate user and generate access token
      tags:
      - Users
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user by providing user information in the request
        body.
      parameters:
      - description: User registration payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BadRequest'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ServerError'
      summary: Register a new user
      tags:
      - Users
  /auth/user:
    get:
      consumes:
      - application/json
      description: Retrieve information about the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Unauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ServerError'
      security:
      - ApiKeyAuth: []
      summary: Get user information
      tags:
      - Users
  /wallet:
    get:
      consumes:
      - application/json
      description: Retrieve a list of wallets belonging to the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Success'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Unauthorized'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/response.BadGateway'
      security:
      - ApiKeyAuth: []
      summary: List user's wallets
      tags:
      - Wallet
    post:
      consumes:
      - application/json
      description: Creates a new wallet for the user. The user can have a maximum
        of 3 wallets.
      parameters:
      - description: Wallet creation request payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.WalletCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Unauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ServerError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/response.BadGateway'
      security:
      - ApiKeyAuth: []
      summary: Create a new wallet for the authenticated user
      tags:
      - Wallet
  /wallet/{address}:
    delete:
      consumes:
      - application/json
      description: Deletes a wallet with the specified address for the authenticated
        user
      parameters:
      - description: Wallet address
        format: '"string"'
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Unauthorized'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.NotFound'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/response.BadGateway'
      security:
      - ApiKeyAuth: []
      summary: Delete a specific wallet
      tags:
      - Wallet
    get:
      consumes:
      - application/json
      description: Retrieves details of a wallet with the specified address for the
        authenticated user
      parameters:
      - description: Wallet address
        format: '"string"'
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Unauthorized'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.NotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ServerError'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/response.BadGateway'
      security:
      - ApiKeyAuth: []
      summary: Get details of a specific wallet
      tags:
      - Wallet
  /wallets/{address}:
    put:
      consumes:
      - application/json
      description: Updates details of a wallet with the specified address for the
        authenticated user
      parameters:
      - description: Wallet address
        format: '"string"'
        in: path
        name: address
        required: true
        type: string
      - description: Wallet update request payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.WalletUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Unauthorized'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.NotFound'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/response.BadGateway'
      security:
      - ApiKeyAuth: []
      summary: Update details of a specific wallet
      tags:
      - Wallet
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
